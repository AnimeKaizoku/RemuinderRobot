// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/enrico5b1b4/telegram-bot/cron (interfaces: Scheduler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	cron "github.com/enrico5b1b4/telegram-bot/cron"
	gomock "github.com/golang/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockScheduler) Add(arg0 string, arg1 func()) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockSchedulerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockScheduler)(nil).Add), arg0, arg1)
}

// GetEntryByID mocks base method
func (m *MockScheduler) GetEntryByID(arg0 int) cron.Entry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryByID", arg0)
	ret0, _ := ret[0].(cron.Entry)
	return ret0
}

// GetEntryByID indicates an expected call of GetEntryByID
func (mr *MockSchedulerMockRecorder) GetEntryByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryByID", reflect.TypeOf((*MockScheduler)(nil).GetEntryByID), arg0)
}

// Remove mocks base method
func (m *MockScheduler) Remove(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove
func (mr *MockSchedulerMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockScheduler)(nil).Remove), arg0)
}

// Start mocks base method
func (m *MockScheduler) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockSchedulerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockScheduler)(nil).Start))
}
