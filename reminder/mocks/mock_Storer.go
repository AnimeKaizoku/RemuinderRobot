// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/enrico5b1b4/telegram-bot/reminder (interfaces: Storer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	reminder "github.com/enrico5b1b4/telegram-bot/reminder"
	gomock "github.com/golang/mock/gomock"
)

// MockStorer is a mock of Storer interface
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// CreateReminder mocks base method
func (m *MockStorer) CreateReminder(arg0 *reminder.Reminder) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReminder", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReminder indicates an expected call of CreateReminder
func (mr *MockStorerMockRecorder) CreateReminder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReminder", reflect.TypeOf((*MockStorer)(nil).CreateReminder), arg0)
}

// DeleteReminder mocks base method
func (m *MockStorer) DeleteReminder(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReminder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReminder indicates an expected call of DeleteReminder
func (mr *MockStorerMockRecorder) DeleteReminder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReminder", reflect.TypeOf((*MockStorer)(nil).DeleteReminder), arg0, arg1)
}

// GetAllRemindersByChat mocks base method
func (m *MockStorer) GetAllRemindersByChat() (map[int][]reminder.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRemindersByChat")
	ret0, _ := ret[0].(map[int][]reminder.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRemindersByChat indicates an expected call of GetAllRemindersByChat
func (mr *MockStorerMockRecorder) GetAllRemindersByChat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRemindersByChat", reflect.TypeOf((*MockStorer)(nil).GetAllRemindersByChat))
}

// GetAllRemindersByChatID mocks base method
func (m *MockStorer) GetAllRemindersByChatID(arg0 int) ([]reminder.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRemindersByChatID", arg0)
	ret0, _ := ret[0].([]reminder.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRemindersByChatID indicates an expected call of GetAllRemindersByChatID
func (mr *MockStorerMockRecorder) GetAllRemindersByChatID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRemindersByChatID", reflect.TypeOf((*MockStorer)(nil).GetAllRemindersByChatID), arg0)
}

// GetReminder mocks base method
func (m *MockStorer) GetReminder(arg0, arg1 int) (*reminder.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReminder", arg0, arg1)
	ret0, _ := ret[0].(*reminder.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReminder indicates an expected call of GetReminder
func (mr *MockStorerMockRecorder) GetReminder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReminder", reflect.TypeOf((*MockStorer)(nil).GetReminder), arg0, arg1)
}

// UpdateReminder mocks base method
func (m *MockStorer) UpdateReminder(arg0 *reminder.Reminder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReminder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReminder indicates an expected call of UpdateReminder
func (mr *MockStorerMockRecorder) UpdateReminder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReminder", reflect.TypeOf((*MockStorer)(nil).UpdateReminder), arg0)
}
