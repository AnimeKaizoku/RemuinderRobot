// Code generated by MockGen. DO NOT EDIT.
// Source: chatpreference_store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	chatpreference "github.com/enrico5b1b4/telegram-bot/chatpreference"
	gomock "github.com/golang/mock/gomock"
)

// MockStorer is a mock of Storer interface
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// GetChatPreference mocks base method
func (m *MockStorer) GetChatPreference(chatID int) (*chatpreference.ChatPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatPreference", chatID)
	ret0, _ := ret[0].(*chatpreference.ChatPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatPreference indicates an expected call of GetChatPreference
func (mr *MockStorerMockRecorder) GetChatPreference(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatPreference", reflect.TypeOf((*MockStorer)(nil).GetChatPreference), chatID)
}

// CreateChatPreference mocks base method
func (m *MockStorer) CreateChatPreference(arg0 *chatpreference.ChatPreference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatPreference", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChatPreference indicates an expected call of CreateChatPreference
func (mr *MockStorerMockRecorder) CreateChatPreference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatPreference", reflect.TypeOf((*MockStorer)(nil).CreateChatPreference), arg0)
}
